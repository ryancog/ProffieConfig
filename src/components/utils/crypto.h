#pragma once
/*
 * ProffieConfig, All-In-One Proffieboard Management Utility
 * Copyright (C) 2024 Ryan Ogurek
 *
 * components/utils/crypto.h
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#include <chrono>
#include <random>

#include <utils/types.h>

#include "private/export.h"

namespace Crypto {

// Pass in a `collisionMap` map of given type to check against to ensure no
// duplicates/collisions are generated by this function.
template <typename MAP>
inline uint64 genUID(const MAP& collisionMap) {
    std::mt19937_64 idGen{static_cast<uint64>(std::chrono::steady_clock::now().time_since_epoch().count())};
    auto id{idGen()};
    while (collisionMap.find(id) != collisionMap.end()) id ^= idGen();
    return id;
}

/**
 * Compute the hash at the given `path`
 *
 * Computes the SHA256 hash of the file using tomcrypt.
 *
 * @param path The path of the file to hash
 *
 * @return The hash as a str
 */
UTILS_EXPORT std::string computeHash(const filepath& path);


} // namespace Crypto


